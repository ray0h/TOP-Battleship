{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/factories/gameboard.js","webpack:///./src/factories/player.js","webpack:///./src/factories/randomShipArray.js","webpack:///./src/factories/ships.js","webpack:///./src/index.js","webpack:///./src/ui/dragHandlers.js","webpack:///./src/ui/gameplay.js","webpack:///./src/ui/render.js","webpack:///./src/ui/setShipArray.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAA2B;;AAE3B;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,oBAAoB,sDAAI;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,wEAAS,E;;;;;;;;;;;;AClDxB;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,qEAAM,E;;;;;;;;;;;;ACnCrB;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wF;AACA;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEe,8EAAe,E;;;;;;;;;;;;AC7D9B;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,mEAAI,EAAC;;;;;;;;;;;;;ACvBpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACM;AACY;AACb;AACR;AACJ;;AAEjC,oBAAoB,0DAAM;AAC1B;AACA;;AAEA;;AAEA,kBAAkB,iEAAM;AACxB,kBAAkB,iEAAM;;AAExB,gBAAgB,oEAAS;AACzB,kBAAkB,oEAAS;;AAE3B,gBAAgB,0EAAe;AAC/B,gBAAgB,0EAAe;AAC/B;AACA;AACA;;AAEA;AACA,IAAI,gEAAY;AAChB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,4DAAQ;AACV;;AAEA,Y;;;;;;;;;;;;AC3CA;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oEAAoE,OAAO;AAC3E,KAAK;AACL,uCAAuC,OAAO;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qCAAqC;AAC1D,qBAAqB,wCAAwC;AAC7D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC,SAAS;AAC7C;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,2EAAY,E;;;;;;;;;;;;ACvG3B;AAAA;AAA8B;;AAE9B;;AAEA;AACA,oBAAoB,uDAAM;;AAE1B;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,gBAAgB;AACjD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,kC;AACA;AACA,+BAA+B,gBAAgB;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA,oC;AACA;AACA,iCAAiC,gBAAgB;AACjD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEe,uEAAQ,E;;;;;;;;;;;;ACnFvB;AAAA;AAA0C;;AAE1C;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,SAAS;AAC5B;AACA;AACA,gC;AACA;AACA,qBAAqB,6DAAY;AACjC,yBAAyB,6DAAY;AACrC,0BAA0B,6DAAY;AACtC,0BAA0B,6DAAY;AACtC,wBAAwB,6DAAY;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C,cAAc,GAAG,MAAM;;AAErE;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA,+BAA+B,QAAQ;AACvC,8BAA8B,6DAAY;AAC1C;AACA;;AAEA;AACA,0BAA0B,MAAM,GAAG,YAAY,EAAE,YAAY,EAAE,QAAQ;AACvE;;AAEA;AACA;;AAEA;AACA;AACA,iCAAiC,iBAAiB,I;AAClD,sDAAsD,YAAY;AAClE,OAAO;AACP,kCAAkC,iBAAiB;AACnD;AACA,mDAAmD,YAAY;AAC/D;AACA,0BAA0B,6DAAY;AACtC;;AAEA,wDAAwD,QAAQ;AAChE;;AAEA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+CAA+C,GAAG;AAClD;AACA;;AAEA;AACA,I;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gB;;AAEA;AACA,qCAAqC,YAAY;AACjD,6CAA6C,YAAY;AACzD,8CAA8C,OAAO;AACrD,mDAAmD,OAAO;AAC1D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD,OAAO;AACP;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,qEAAM,E;;;;;;;;;;;;ACzJrB;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA,8C;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,8DAA8D,MAAM;AACpE;AACA;AACA;AACA,GAAG;AACH;;AAEe,2EAAY,E","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","import Ship from \"./ships\";\n\nconst Gameboard = (boardId) => {\n\n  let shipArray = [];\n  let boardArray = Array(100);\n\n  function placeShip(coords) {\n    let isAlreadyOccupied = false;\n    \n    coords.forEach(coord => {\n      if (boardArray[coord]) {\n        isAlreadyOccupied = true;\n      };\n    });\n\n    if (!isAlreadyOccupied) {\n      let id = shipArray.length + 1;\n      let newShip = Ship(id, coords);\n      shipArray.push(newShip);\n      coords.forEach(coord => boardArray[coord] = id);\n    };\n  };\n\n  function receiveAttack(coord) {\n    if(boardArray[coord] === \"miss\" || boardArray[coord] === \"hit\") {\n      return;\n    } else if(boardArray[coord] === undefined) {\n      boardArray[coord] = \"miss\";\n    } else {\n      let hitShip = shipArray[boardArray[coord]-1];\n      hitShip.hit(coord);\n      boardArray[coord] = \"hit\";\n    }\n  };\n\n  function allShipsSunk() {\n    return shipArray.map(ship => ship.isSunk()).every(isSunk => isSunk === true);\n  };\n\n  return {\n    boardId,\n    boardArray,\n    shipArray,\n    placeShip,\n    receiveAttack,\n    allShipsSunk\n  };\n};\n\nexport default Gameboard;","const Player = () => {\n  let isTurn = true;\n\n  function setTurn(bool) {\n    isTurn = bool;\n  };\n\n  function getTurn() {\n    return isTurn;\n  };\n\n  function attack(enemyBoard, coord) {\n    if (isTurn) {\n      enemyBoard.receiveAttack(coord);\n    };\n  };\n\n  function randomAttack(enemyBoard) {\n    if (isTurn) {\n      let coord = Math.floor(Math.random()*100);\n      while (enemyBoard.boardArray[coord] === \"miss\" || enemyBoard.boardArray[coord] === \"hit\") {\n        coord = Math.floor(Math.random()*100);\n      }\n      enemyBoard.receiveAttack(coord);\n    }\n  }\n\n  return {\n    getTurn,\n    setTurn,\n    attack,\n    randomAttack,\n  }\n};\n\nexport default Player;","const randomShipArray = () => {\n\n  const newShip = (length) => {\n    return {\n      orientation: randomOrient(),\n      length,\n    };\n  };\n\n  const randomOrient = () => {\n    const flip = Math.round(Math.random());\n    return (flip === 0) ? \"h\" : \"v\";\n  };\n\n  // define number and lengths of ships\n  const shipClasses = [5, 4, 3, 3, 2];\n  const fleet = shipClasses.map(length => newShip(length));\n\n  // generate position array\n  const grid = Array(100).fill(null);\n  let randomFleetPosition = [];\n\n  fleet.forEach(ship => {\n    let isNotClear = true;\n    let coordsNotValid = true;\n    let newShip;\n\n    while (isNotClear || coordsNotValid) {\n      coordsNotValid = true;\n      newShip = [];\n\n      // generate ship coordinates\n      const randomCoordinates = Math.floor(Math.random()*100);\n      for (let i = 0; i < ship.length; i++) {\n        if (ship.orientation === \"h\") {\n          newShip.push(randomCoordinates + i)\n        } else if (ship.orientation === \"v\") {\n          newShip.push(randomCoordinates + (i*10))\n        };\n      };\n\n      // check if valid (within grid, does not wrap around grid)\n      const withinGrid = newShip.every(square => square < 100);\n      const modArr = newShip.map(square => square % 10);\n      const sortArr = newShip.map(square => square % 10).sort();\n      const noWrap = (JSON.stringify(modArr) === JSON.stringify(sortArr));\n      coordsNotValid = !(withinGrid && noWrap);\n\n       // check coordinates do not overlap with other ships\n       isNotClear = !newShip.map(coord => grid[coord] === null).every(square => square); \n    };\n\n    // mark ships on internal grid\n    newShip.forEach(square => grid[square] = \"x\");\n\n    randomFleetPosition.push(newShip);\n  });\n\n  return randomFleetPosition;\n};\n\nexport default randomShipArray;","const Ship = (id, position) => {\n  \n  let hits = [];\n\n  function hit(pos) {\n    if (position.includes(pos)) {\n      hits.push(pos);\n    };\n  };\n\n  function isSunk() {\n    return (hits.length === position.length) ? true : false;\n  };\n\n  return {\n    id,\n    length: position.length,\n    hits,\n    hit,\n    isSunk,\n  };\n};\n\nexport default Ship;\n","import Player from \"./factories/player\";\nimport Gameboard from \"./factories/gameboard\";\nimport randomShipArray from \"./factories/randomShipArray\";\nimport setShipArray from \"./ui/setShipArray\";\nimport gameplay from \"./ui/gameplay\";\nimport render from \"./ui/render\";\n\nconst renderBoard = render();\n// same button used to start / reset game\nlet btn = document.getElementById(\"gameBtn\");\n\nconst setupGame = () => {\n\n  const player1 = Player();\n  const player2 = Player();\n  \n  let p1Board = Gameboard(\"p1Board\");\n  const p2Board = Gameboard(\"p2Board\");\n  \n  let p1Ships = randomShipArray();\n  let p2Ships = randomShipArray();\n  p2Ships.forEach(ship => p2Board.placeShip(ship));\n  renderBoard.initializeBoards();\n  renderBoard.makeDraggableShips(p1Ships);\n\n  btn.onclick = () => {\n    setShipArray(p1Board);\n    renderBoard.clearDraggableShips(p1Ships);\n    btn.textContent = \"Reset Game\";\n    renderBoard.message(\"\");\n    playGame(player1, player2, p1Board, p2Board);\n  };\n};\n\nconst playGame = (player1, player2, p1Board, p2Board) => {\n  btn.onclick = () => {\n    btn.textContent=\"Play Game\"\n    renderBoard.message(\"Place Ships (dbl click to rotate)\");\n    setupGame();\n  };\n  gameplay(player1, player2, p1Board, p2Board);\n};\n\nsetupGame();","const dragHandlers = () => {\n  // draggable ships comprised of unit squares\n  // ship square ids based on board square location they are covering\n\n  const handleMouseEnter = (e) => {\n    const square = document.getElementById(e.target.id);\n    const parent = square.parentNode;\n\n    // get mouse location, main ship marker location\n    const currentMousePosition = Number(e.target.id.match(/^((?!sh).)+/g)[0].slice(8));\n    const shipBow = Number(parent.id.match(/^((?!offset\\d+).)+/)[0].slice(8));\n    const offset = currentMousePosition - shipBow;\n\n    if (parent.id.includes(\"offset\")) {\n      parent.id = parent.id.match(/^((?!offset\\d+).)+/)[0]+`offset${offset}`;\n    } else {\n      parent.id = parent.id + `offset${offset}`;\n    };\n  };\n\n  const handleDragStart = (e) => {\n    e.target.style.opacity = \"0.4\";\n    e.dataTransfer.setData(\"shipId\", e.target.id.match(/^((?!offset\\d+).)+/)[0]);\n    e.dataTransfer.setData(\"length\", Number(e.target.id.slice(6,7) ));\n    e.dataTransfer.setData(\"orientation\", e.target.id.slice(7,8) );\n    e.dataTransfer.setData(\"location\", Number(e.target.id.slice(8) ));\n    e.dataTransfer.setData(\"offset\", Number(e.target.id.match(/offset\\d+/g)[0].slice(6)));\n    e.target.id = e.target.id.match(/^((?!offset\\d+).)+/)[0];\n  };\n\n  const handleDragOver = (e) => {\n    if (e.preventDefault()) {\n      e.preventDefault();\n    };\n    return false;\n  };\n\n  function handleDragEnter (e) {\n  };\n\n  function handleDragLeave (e) {\n  };\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n    const draggedId = e.dataTransfer.getData(\"shipId\");\n    let dragged = document.getElementById(draggedId);\n    \n    // check dragged ship doesnt overlap with another ship (except itself)\n    const orientation = e.dataTransfer.getData(\"orientation\");\n    const offset = e.dataTransfer.getData(\"offset\");\n\n    let current = e.target.id.match(/^((?!sh).)+/g)[0]\n    let spot = Number(current.slice(8));\n    let offsetValue = current.slice(0,8)+(spot-Number(offset))\n\n    // const dropArea = document.getElementById(e.target.id.match(/^((?!sh).)+/g));\n    const dropArea = document.getElementById(offsetValue);\n    const squares = [...dragged.childNodes];\n    const currSqs = squares.map(sq => sq.id);\n    const possSqs = squares.map((sq, index) => \n      (orientation === \"h\") \n        ? `p1Board-${Number(dropArea.id.slice(8)) + index}sh`\n        : `p1Board-${Number(dropArea.id.slice(8)) + index*10}sh`\n      );\n    const noOverlap = possSqs\n      .map(sq => (document.getElementById(sq) === null) || currSqs.includes(sq))\n      .every(el => el);\n\n    // check if dragged ship remains on the grid\n    const squareIds = possSqs.map(sq => Number(sq.match(/^((?!sh).)+/g).slice(7)));\n    const withinGrid = squareIds.every(el => el < 100);\n    const modArr = squareIds.map(el => el % 10);\n    const sortArr = squareIds.map(el => el % 10).sort();\n    const noWrap = (JSON.stringify(modArr) === JSON.stringify(sortArr));\n    const newCoordsValid = withinGrid && noWrap;\n    \n    // do not append if dropping on current square or does not meet above conditions\n    let location = e.dataTransfer.getData(\"location\");\n    if ((e.target.id !== `p1Board-${location}`) && newCoordsValid && noOverlap) {\n      dropArea.appendChild(dragged);\n\n      // rename ship id/square id's based on new location\n      dragged.id = dragged.id.slice(0,8)+Number(dropArea.id.slice(8));\n      squares.forEach((sq, index) => sq.id = possSqs[index]);\n    };\n  };\n\n  const handleDragEnd = (e) => {\n    e.target.style.opacity = \"1\";\n  };\n\n  return {\n    handleMouseEnter,\n    handleDragStart,\n    handleDragOver,\n    handleDragEnter,\n    handleDragLeave,\n    handleDrop,\n    handleDragEnd,\n  };\n};\n\nexport default dragHandlers;","import render from \"./render\";\n\nconst gameplay = (player1, player2, p1Board, p2Board) => {\n\n  let coordinates;\n  let renderBoard = render();\n\n  player1.setTurn(true);\n  player2.setTurn(false);\n\n  const isThereWinner = () => {\n    if (p1Board.allShipsSunk()) {\n      return \"player2\";\n    } else if (p2Board.allShipsSunk()) {\n      return \"player1\";\n    } else {\n      return false\n    };\n  };\n\n  const wait = (ms) => {\n    return new Promise((res, rej) => {\n      setTimeout(() => {\n        res(ms)\n      }, ms)\n    });\n  };\n\n  async function playRound(event) {\n    // if winner, gameplay disabled\n    if (!isThereWinner()) {\n      coordinates = Number(event.target.id.slice(8));\n\n      // ignore previous moves\n      if (p2Board.boardArray[coordinates] === \"miss\" || p2Board.boardArray[coordinates] === \"hit\") {\n        return;\n      };\n\n      player1.attack(p2Board, coordinates);\n      renderBoard.update(p2Board);\n\n      // skip p2 computer turn if p1 gets hit\n      if (p2Board.boardArray[coordinates] === \"hit\") {\n        if (isThereWinner()) {\n          renderBoard.message(`${isThereWinner()} won the game!`)\n        };\n        return;\n      };\n\n      player1.setTurn(false);\n      player2.setTurn(true);\n\n      // p2 computer coordinates are random moves\n      coordinates = Math.floor(Math.random() * 100);\n      player2.attack(p1Board, coordinates);\n      await(wait(500));\n      renderBoard.update(p1Board);  \n      if (isThereWinner()) {\n        renderBoard.message(`${isThereWinner()} won the game!`)\n      };\n\n      // skip p1's turn if getting hits\n      while (p1Board.boardArray[coordinates] === \"hit\") {\n        coordinates = Math.floor(Math.random() * 100);\n        player2.attack(p1Board, coordinates);\n        await(wait(500));\n        renderBoard.update(p1Board); \n        if (isThereWinner()) {\n          renderBoard.message(`${isThereWinner()} won the game!`)\n        };\n      };\n\n      player1.setTurn(true);\n      player2.setTurn(false);\n    };\n  };\n\n  renderBoard.update(p1Board);\n\n  const board = document.getElementById(\"p2Board\");\n  board.onclick=playRound;\n};\n\nexport default gameplay;","import dragHandlers from \"./dragHandlers\";\n\nconst render = () => {\n\n  const initializeBoards = () => {\n    const playerOneBoard = document.getElementById(\"p1Board\");\n    const playerTwoBoard = document.getElementById(\"p2Board\");\n\n    playerOneBoard.innerHTML = \"\";\n    playerTwoBoard.innerHTML = \"\";\n    \n    for (let i = 0; i < 100; i++) {\n      let newDiv1 = document.createElement(\"div\");\n      let newDiv2 = document.createElement(\"div\");\n      newDiv1.id = \"p1Board-\"+i; \n      newDiv1.classList.add(\"square\");\n      newDiv1.ondrop=dragHandlers().handleDrop;\n      newDiv1.ondragover=dragHandlers().handleDragOver;\n      newDiv1.ondragenter=dragHandlers().handleDragEnter;\n      newDiv1.ondragleave=dragHandlers().handleDragLeave;\n      newDiv1.ondragend=dragHandlers().handleDragEnd;\n      newDiv2.id = \"p2Board-\"+i;\n      newDiv2.classList.add(\"empty\", \"square\");\n      playerOneBoard.appendChild(newDiv1);\n      playerTwoBoard.appendChild(newDiv2);\n    };\n  };\n\n  const update = (board) => {\n    board.boardArray.forEach(function(sq, index) {\n      let square = document.getElementById(`${board.boardId}-${index}`);\n  \n      if (sq === \"miss\") {\n        square.classList.add(\"miss\");\n        square.textContent = '\\u2022';\n      } else if (sq === \"hit\") {\n        square.classList.add(\"hit\");\n        square.textContent = '\\u002B';\n      }\n    });\n  \n  };\n\n  const makeDraggableShips = (shipArray) => {\n\n    shipArray.forEach( (ship, index) => {\n      const orientation = (ship[1] - ship[0] === 1) ? \"h\" : \"v\";\n      const newShip = document.createElement(\"div\");\n      for (let i = 0; i < ship.length; i++) {\n        const newDiv = document.createElement(\"div\");\n        newDiv.classList.add(\"square\");\n        newDiv.id = `p1Board-${ship[i]}sh`;\n        newDiv.onmouseenter = dragHandlers().handleMouseEnter;\n        newShip.appendChild(newDiv);\n      };\n\n      newShip.classList.add(\"dragMe\");\n      newShip.id = `ship${index}-${ship.length}${orientation}${ship[0]}`;\n      newShip.setAttribute(\"draggable\", \"true\");\n\n      newShip.style.display = \"grid\";\n      newShip.style.gridGap = \"1px\";\n\n      if (orientation === \"h\") {\n        newShip.style.height = \"27px\";\n        newShip.style.width = `${ship.length * 26}px`; \n        newShip.style.gridTemplateColumns = `repeat(${ship.length}, 25px)`;\n      } else if(orientation === \"v\") {\n        newShip.style.height = `${ship.length * 26}px`;\n        newShip.style.width = \"27px\";\n        newShip.style.gridTemplateRows = `repeat(${ship.length}, 25px)`;\n      };\n      newShip.ondragstart=dragHandlers().handleDragStart;\n      newShip.ondblclick=rotateShip;\n\n      let position = document.getElementById(`p1Board-${ship[0]}`);\n      position.appendChild(newShip);\n      \n    });\n  };\n\n  const clearDraggableShips = () => {\n    const draggableShips = document.querySelectorAll(\".dragMe\");\n\n    draggableShips.forEach(ship => {\n      let parentDiv = ship.parentNode;\n      parentDiv.innerHTML = \"\";\n    });\n  };\n\n  const isLegalRotation = (coords) => {\n    const withinGrid = coords.every(el => el < 100);\n    const modArr = coords.map(el => el % 10);\n    const sortArr = coords.map(el => el % 10).sort();\n    const noWrap = (JSON.stringify(modArr) === JSON.stringify(sortArr));\n    const newCoordsValid = withinGrid && noWrap;\n\n    const noOverlap = coords\n      .map((id, ind) => ind !== 0 ? `p1Board-${id}sh` : \"\")\n      .map(sq => (document.getElementById(sq) === null))\n      .every(el => el);\n    \n    return (newCoordsValid && noOverlap);\n  }; \n\n  const rotateShip = (e) => {\n    let id = e.target.parentNode.id;\n    // let id = e.target.id;\n    let ship = document.getElementById(id);\n    let length = id.slice(6,7);\n    let orient = id.slice(7,8);\n    let loc = Number(id.match(/^((?!offset\\d+).)+/g)[0].slice(8));\n    let squares = [...ship.childNodes];\n    let possSqs; \n\n    let params = {\n      height : (orient === \"h\") ? `${length * 26}px` : \"27px\",\n      width : (orient === \"h\") ? \"27px\" : `${length * 26}px`,\n      gridRows : (orient === \"h\") ? `repeat(${length}, 25px)` : \"\",\n      gridCols : (orient === \"h\") ? \"\" : `repeat(${length}, 25px)`,\n      newOrient : (orient === \"h\") ? \"v\" : \"h\",\n      factor : (orient === \"h\") ? 10 : 1\n    };\n    \n    possSqs = squares.map((sq, index) => loc+index*params.factor);\n    if (isLegalRotation(possSqs)) {\n      ship.style.height = params.height;\n      ship.style.width = params.width;\n      ship.style.gridTemplateRows = params.gridRows;\n      ship.style.gridTemplateColumns = params.gridCols;\n      ship.id = ship.id.slice(0,7) + params.newOrient + ship.id.slice(8);\n      squares.forEach((sq, index) => {\n        sq.id = `p1Board-${loc+index*params.factor}sh`;\n      });\n    };\n  };\n\n\n  const message = (msg) => {\n    const message = document.getElementById(\"message\");\n    message.textContent = msg;\n  };\n\n  return {\n    initializeBoards,\n    update,\n    makeDraggableShips,\n    clearDraggableShips,\n    rotateShip,\n    message,\n  }\n};\n\nexport default render;","const setShipArray = (board) => {\n\n  // get location of all ships/ship squares from rendered board\n  const ships = document.querySelectorAll(\".dragMe\");\n  let finalShips = [];\n\n  ships.forEach(ship => {\n    let shipArray = [];\n    const shipLength = ship.id.slice(6,7);\n    const shipOrient = ship.id.slice(7,8);\n    const shipLocation = Number(ship.id.match(/^((?!offset\\d+).)+/g)[0].slice(8));\n    for (let i = 0; i < shipLength; i++) {\n      (shipOrient === \"h\") \n        ? shipArray.push(shipLocation + i) \n        : shipArray.push(shipLocation + i*10); \n    };\n    finalShips.push(shipArray);\n  });\n\n  // add final ship locations to gameboard\n  finalShips.forEach(ship => board.placeShip(ship));\n  board.boardArray.forEach((boardSquare, index) => {\n    const renderedSquare = document.getElementById(`p1Board-${index}`);\n    if (typeof(boardSquare) === \"number\") {\n      renderedSquare.classList.add(\"ship\");\n    };\n  });\n};\n\nexport default setShipArray;"],"sourceRoot":""}